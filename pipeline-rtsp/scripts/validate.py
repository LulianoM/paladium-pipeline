#!/usr/bin/env python3
"""
Script de valida√ß√£o para o servidor RTSP
"""

import os
import sys
import subprocess
import time
import socket
from pathlib import Path


def check_file_exists(file_path):
    """Verificar se o arquivo de v√≠deo existe"""
    print(f"üîç Verificando arquivo: {file_path}")
    if not os.path.exists(file_path):
        print(f"‚ùå Arquivo n√£o encontrado: {file_path}")
        return False
    
    file_size = os.path.getsize(file_path)
    print(f"‚úÖ Arquivo encontrado: {file_path} ({file_size} bytes)")
    return True


def check_docker():
    """Verificar se Docker est√° dispon√≠vel"""
    print("üê≥ Verificando Docker...")
    try:
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Docker dispon√≠vel: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Docker n√£o est√° funcionando")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Docker n√£o encontrado")
        return False


def check_docker_compose():
    """Verificar se Docker Compose est√° dispon√≠vel"""
    print("üì¶ Verificando Docker Compose...")
    try:
        result = subprocess.run(['docker-compose', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ Docker Compose dispon√≠vel: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Docker Compose n√£o est√° funcionando")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå Docker Compose n√£o encontrado")
        return False


def check_port_available(port):
    """Verificar se a porta est√° dispon√≠vel"""
    print(f"üîå Verificando porta {port}...")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        result = sock.connect_ex(('localhost', port))
        if result == 0:
            print(f"‚ùå Porta {port} j√° est√° em uso")
            return False
        else:
            print(f"‚úÖ Porta {port} dispon√≠vel")
            return True
    finally:
        sock.close()


def check_make():
    """Verificar se Make est√° dispon√≠vel"""
    print("üî® Verificando Make...")
    try:
        result = subprocess.run(['make', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Make dispon√≠vel")
            return True
        else:
            print("‚ö†Ô∏è  Make n√£o est√° funcionando (opcional)")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ö†Ô∏è  Make n√£o encontrado (opcional)")
        return False


def validate_video_format(file_path):
    """Validar formato do v√≠deo usando ffprobe se dispon√≠vel"""
    print("üé¨ Verificando formato do v√≠deo...")
    try:
        result = subprocess.run([
            'docker', 'run', '--rm', 
            '-v', f'{os.path.abspath(file_path)}:/video.mp4:ro',
            'jrottenberg/ffmpeg:4.4-alpine',
            'ffprobe', '-v', 'quiet', '-print_format', 'json',
            '-show_format', '-show_streams', '/video.mp4'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Formato de v√≠deo v√°lido")
            # Aqui poderia parsear o JSON para mais detalhes
            return True
        else:
            print("‚ö†Ô∏è  N√£o foi poss√≠vel validar o formato do v√≠deo")
            return True  # N√£o falhar por isso
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ö†Ô∏è  ffprobe n√£o dispon√≠vel para valida√ß√£o")
        return True


def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("üöÄ Paladium RTSP Pipeline - Valida√ß√£o\n")
    
    # Definir caminhos
    video_path = "../video.mp4"
    
    # Lista de verifica√ß√µes
    checks = [
        ("Arquivo de v√≠deo", lambda: check_file_exists(video_path)),
        ("Docker", check_docker),
        ("Docker Compose", check_docker_compose),
        ("Porta 8554", lambda: check_port_available(8554)),
        ("Make (opcional)", check_make),
        ("Formato do v√≠deo", lambda: validate_video_format(video_path)),
    ]
    
    results = []
    
    # Executar verifica√ß√µes
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro ao verificar {name}: {e}")
            results.append((name, False))
        print()
    
    # Resumo
    print("üìä Resumo da Valida√ß√£o:")
    print("=" * 40)
    
    critical_failed = []
    optional_failed = []
    
    for name, result in results:
        status = "‚úÖ OK" if result else "‚ùå FALHOU"
        print(f"{name:20} : {status}")
        
        if not result:
            if "opcional" in name.lower():
                optional_failed.append(name)
            else:
                critical_failed.append(name)
    
    print()
    
    # Verificar se pode prosseguir
    if critical_failed:
        print("‚ùå Valida√ß√£o FALHOU!")
        print("Problemas cr√≠ticos encontrados:")
        for item in critical_failed:
            print(f"  - {item}")
        print("\nResolva os problemas acima antes de continuar.")
        sys.exit(1)
    
    elif optional_failed:
        print("‚ö†Ô∏è  Valida√ß√£o PARCIAL!")
        print("Problemas opcionais encontrados:")
        for item in optional_failed:
            print(f"  - {item}")
        print("\nVoc√™ pode continuar, mas algumas funcionalidades podem n√£o estar dispon√≠veis.")
    
    else:
        print("‚úÖ Valida√ß√£o COMPLETA!")
        print("Todos os requisitos foram atendidos.")
    
    print("\nüöÄ Para iniciar o servidor:")
    if not any("Make" in item for item in optional_failed):
        print("  make demo")
    else:
        print("  docker-compose up --build -d")
    
    print("\nüì∫ URL para teste no VLC:")
    print("  rtsp://localhost:8554/cam1")


if __name__ == "__main__":
    main()
