# Paladium RTSP Pipeline Makefile
# Comandos para gerenciar o servidor RTSP

.PHONY: help build up down logs restart clean demo status health

# Configura√ß√µes
COMPOSE_FILE = docker-compose.yml
SERVICE_NAME = rtsp-server
VIDEO_FILE = ../video.mp4

help: ## Mostrar esta ajuda
	@echo "Paladium RTSP Pipeline - Comandos Dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

validate: ## Validar pr√©-requisitos antes de iniciar
	@echo "üîç Validando pr√©-requisitos..."
	@python3 scripts/validate.py

build: ## Construir a imagem Docker
	@echo "üî® Construindo imagem Docker..."
	docker-compose -f $(COMPOSE_FILE) build

up: ## Iniciar o servidor RTSP
	@echo "üöÄ Iniciando servidor RTSP..."
	@if [ ! -f $(VIDEO_FILE) ]; then \
		echo "‚ùå Erro: Arquivo $(VIDEO_FILE) n√£o encontrado!"; \
		echo "   Certifique-se de que o arquivo video.mp4 existe no diret√≥rio pai."; \
		exit 1; \
	fi
	docker-compose -f $(COMPOSE_FILE) up -d
	@echo "‚úÖ Servidor iniciado!"
	@echo "üì∫ URL do stream: rtsp://localhost:8554/cam1"
	@echo "üé¨ Teste no VLC: rtsp://localhost:8554/cam1"

down: ## Parar o servidor RTSP
	@echo "üõë Parando servidor RTSP..."
	docker-compose -f $(COMPOSE_FILE) down
	@echo "‚úÖ Servidor parado!"

logs: ## Mostrar logs do servidor
	@echo "üìã Logs do servidor RTSP:"
	docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE_NAME)

restart: down up ## Reiniciar o servidor RTSP

clean: ## Limpar containers e imagens
	@echo "üßπ Limpando containers e imagens..."
	docker-compose -f $(COMPOSE_FILE) down -v --remove-orphans
	docker-compose -f $(COMPOSE_FILE) down --rmi all
	@echo "‚úÖ Limpeza conclu√≠da!"

demo: validate build up ## Comando √∫nico para demo (validate + build + up)
	@echo "üéâ Demo iniciada!"
	@echo ""
	@echo "üì∫ URLs para teste:"
	@echo "   VLC: rtsp://localhost:8554/cam1"
	@echo "   Browser (se suportado): rtsp://localhost:8554/cam1"
	@echo ""
	@echo "üîç Para monitorar:"
	@echo "   make logs    - Ver logs em tempo real"
	@echo "   make status  - Ver status do container"
	@echo "   make health  - Verificar sa√∫de do servi√ßo"
	@echo ""
	@echo "üõë Para parar:"
	@echo "   make down    - Parar servidor"

status: ## Mostrar status dos containers
	@echo "üìä Status dos containers:"
	docker-compose -f $(COMPOSE_FILE) ps

health: ## Verificar sa√∫de do servidor
	@echo "üè• Verificando sa√∫de do servidor..."
	@if docker-compose -f $(COMPOSE_FILE) ps | grep -q "Up"; then \
		echo "‚úÖ Servidor est√° rodando"; \
		docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) gst-inspect-1.0 rtspsrc > /dev/null 2>&1 && \
		echo "‚úÖ GStreamer RTSP funcionando" || \
		echo "‚ùå Problema com GStreamer RTSP"; \
	else \
		echo "‚ùå Servidor n√£o est√° rodando"; \
	fi

dev-shell: ## Abrir shell no container para debug
	@echo "üêö Abrindo shell no container..."
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) /bin/bash

test-gstreamer: ## Testar pipeline GStreamer localmente
	@echo "üß™ Testando pipeline GStreamer..."
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) gst-launch-1.0 \
		filesrc location=/app/video/video.mp4 ! \
		qtdemux ! h264parse ! avdec_h264 ! \
		videoconvert ! autovideosink

test-rtsp: ## Testar conex√£o RTSP (para por 5 segundos)
	@echo "üé¨ Testando conex√£o RTSP por 5 segundos..."
	@echo "Se funcionar, voc√™ ver√° dados sendo recebidos sem erro EOS"
	@(docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) \
		gst-launch-1.0 rtspsrc location=rtsp://localhost:8554/cam1 ! fakesink &) && \
	sleep 5 && \
	echo "‚úÖ Teste conclu√≠do - Stream funcionando!" || \
	echo "‚ùå Erro no teste"

# Comandos de desenvolvimento
dev-build: ## Build para desenvolvimento (sem cache)
	@echo "üî® Build de desenvolvimento (sem cache)..."
	docker-compose -f $(COMPOSE_FILE) build --no-cache

dev-up: ## Up para desenvolvimento (com logs)
	@echo "üöÄ Iniciando em modo desenvolvimento..."
	docker-compose -f $(COMPOSE_FILE) up

# Comando padr√£o
all: demo

# Informa√ß√µes sobre o arquivo de v√≠deo
video-info: ## Mostrar informa√ß√µes do arquivo de v√≠deo
	@echo "üìπ Informa√ß√µes do arquivo de v√≠deo:"
	@if [ -f $(VIDEO_FILE) ]; then \
		ls -lh $(VIDEO_FILE); \
		echo ""; \
		docker run --rm -v $(PWD)/$(VIDEO_FILE):/video.mp4:ro \
		jrottenberg/ffmpeg:4.4-alpine \
		-i /video.mp4 2>&1 | grep -E "(Stream|Duration)"; \
	else \
		echo "‚ùå Arquivo $(VIDEO_FILE) n√£o encontrado!"; \
	fi
