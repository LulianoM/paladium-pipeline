# RTSP to SRT Pipeline Makefile
# Comandos para gerenciar o pipeline RTSP -> SRT

.PHONY: help build up down logs restart clean demo status health test-full

# Configura√ß√µes
COMPOSE_FILE = docker-compose.yml
SERVICE_NAME = rtsp-to-srt
RTSP_SERVICE = rtsp-server
VIDEO_FILE = ../video.mp4

help: ## Mostrar esta ajuda
	@echo "RTSP to SRT Pipeline - Comandos Dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

validate: ## Validar pr√©-requisitos antes de iniciar
	@echo "üîç Validando pr√©-requisitos..."
	@python3 scripts/validate.py

build: ## Construir a imagem Docker
	@echo "üî® Construindo imagem Docker..."
	docker-compose -f $(COMPOSE_FILE) build $(SERVICE_NAME)

build-all: ## Construir todas as imagens (incluindo RTSP server)
	@echo "üî® Construindo todas as imagens..."
	docker-compose -f $(COMPOSE_FILE) --profile test build

up: ## Iniciar apenas o pipeline RTSP->SRT (requer servidor RTSP externo)
	@echo "üöÄ Iniciando pipeline RTSP->SRT..."
	@echo "‚ö†Ô∏è  Certifique-se de que h√° um servidor RTSP rodando em rtsp://localhost:8554/cam1"
	docker-compose -f $(COMPOSE_FILE) up -d $(SERVICE_NAME)
	@echo "‚úÖ Pipeline iniciado!"
	@echo "üì∫ Consumindo de: rtsp://localhost:8554/cam1"
	@echo "üì° Publicando SRT em: srt://127.0.0.1:9999"

up-test: ## Iniciar pipeline completo com servidor RTSP de teste
	@echo "üöÄ Iniciando pipeline completo (RTSP server + RTSP->SRT)..."
	@if [ ! -f $(VIDEO_FILE) ]; then \
		echo "‚ùå Erro: Arquivo $(VIDEO_FILE) n√£o encontrado!"; \
		echo "   Certifique-se de que o arquivo video.mp4 existe no diret√≥rio pai."; \
		exit 1; \
	fi
	docker-compose -f $(COMPOSE_FILE) --profile test up -d
	@echo "‚úÖ Pipeline completo iniciado!"
	@echo "üì∫ RTSP Server: rtsp://localhost:8554/cam1"
	@echo "üì° SRT Output: srt://127.0.0.1:9999"

down: ## Parar o pipeline
	@echo "üõë Parando pipeline..."
	docker-compose -f $(COMPOSE_FILE) --profile test down
	@echo "‚úÖ Pipeline parado!"

logs: ## Mostrar logs do pipeline
	@echo "üìã Logs do pipeline RTSP->SRT:"
	docker-compose -f $(COMPOSE_FILE) logs -f $(SERVICE_NAME)

logs-all: ## Mostrar logs de todos os servi√ßos
	@echo "üìã Logs de todos os servi√ßos:"
	docker-compose -f $(COMPOSE_FILE) --profile test logs -f

restart: down up-test ## Reiniciar o pipeline completo

clean: ## Limpar containers e imagens
	@echo "üßπ Limpando containers e imagens..."
	docker-compose -f $(COMPOSE_FILE) --profile test down -v --remove-orphans
	docker-compose -f $(COMPOSE_FILE) --profile test down --rmi all
	@echo "‚úÖ Limpeza conclu√≠da!"

demo: validate build-all up-test ## Comando √∫nico para demo completa
	@echo "üéâ Demo iniciada!"
	@echo ""
	@echo "üì∫ Pipeline ativo:"
	@echo "   RTSP Input:  rtsp://localhost:8554/cam1"
	@echo "   SRT Output:  srt://127.0.0.1:9999"
	@echo ""
	@echo "üß™ Para testar o SRT output:"
	@echo "   ffplay srt://127.0.0.1:9999"
	@echo "   vlc srt://127.0.0.1:9999"
	@echo ""
	@echo "üîç Para monitorar:"
	@echo "   make logs     - Ver logs do pipeline"
	@echo "   make logs-all - Ver logs completos"
	@echo "   make status   - Ver status dos containers"
	@echo "   make health   - Verificar sa√∫de dos servi√ßos"
	@echo ""
	@echo "üõë Para parar:"
	@echo "   make down     - Parar todos os servi√ßos"

status: ## Mostrar status dos containers
	@echo "üìä Status dos containers:"
	docker-compose -f $(COMPOSE_FILE) --profile test ps

health: ## Verificar sa√∫de dos servi√ßos
	@echo "üè• Verificando sa√∫de dos servi√ßos..."
	@if docker-compose -f $(COMPOSE_FILE) ps | grep -q "Up"; then \
		echo "‚úÖ Servi√ßos est√£o rodando"; \
		docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) gst-inspect-1.0 srtclientsink > /dev/null 2>&1 && \
		echo "‚úÖ GStreamer SRT funcionando" || \
		echo "‚ùå Problema com GStreamer SRT"; \
		docker-compose -f $(COMPOSE_FILE) exec $(RTSP_SERVICE) gst-inspect-1.0 rtspsrc > /dev/null 2>&1 && \
		echo "‚úÖ GStreamer RTSP funcionando" || \
		echo "‚ùå Problema com GStreamer RTSP"; \
	else \
		echo "‚ùå Servi√ßos n√£o est√£o rodando"; \
	fi

dev-shell: ## Abrir shell no container para debug
	@echo "üêö Abrindo shell no container..."
	docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) /bin/bash

test-srt: ## Testar sa√≠da SRT com gstreamer
	@echo "üß™ Testando sa√≠da SRT por 10 segundos..."
	@echo "Se funcionar, voc√™ ver√° dados sendo recebidos sem erro"
	@(docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) \
		gst-launch-1.0 srtclientsrc uri=srt://127.0.0.1:9999 ! fakesink &) && \
	sleep 10 && \
	echo "‚úÖ Teste SRT conclu√≠do!" || \
	echo "‚ùå Erro no teste SRT"

test-pipeline: ## Testar pipeline completo
	@echo "üß™ Testando pipeline RTSP->SRT completo..."
	@echo "Iniciando teste em background por 15 segundos..."
	@(docker-compose -f $(COMPOSE_FILE) exec $(SERVICE_NAME) \
		gst-launch-1.0 \
		rtspsrc location=rtsp://$(RTSP_SERVICE):8554/cam1 ! \
		rtpjitterbuffer ! rtph264depay ! h264parse ! \
		mpegtsmux ! srtclientsink uri=srt://127.0.0.1:9999 &) && \
	sleep 15 && \
	echo "‚úÖ Teste de pipeline conclu√≠do!" || \
	echo "‚ùå Erro no teste de pipeline"

# Comandos de desenvolvimento
dev-build: ## Build para desenvolvimento (sem cache)
	@echo "üî® Build de desenvolvimento (sem cache)..."
	docker-compose -f $(COMPOSE_FILE) build --no-cache $(SERVICE_NAME)

dev-up: ## Up para desenvolvimento (com logs)
	@echo "üöÄ Iniciando em modo desenvolvimento..."
	docker-compose -f $(COMPOSE_FILE) --profile test up

# Comando padr√£o
all: demo

# Informa√ß√µes sobre configura√ß√£o
config: ## Mostrar configura√ß√£o atual
	@echo "‚öôÔ∏è  Configura√ß√£o atual:"
	@echo "RTSP URL: $${RTSP_URL:-rtsp://localhost:8554/cam1}"
	@echo "SRT Host: $${SRT_HOST:-127.0.0.1}"
	@echo "SRT Port: $${SRT_PORT:-9999}"
	@echo "SRT Stream ID: $${SRT_STREAMID:-live/stream1}"
	@echo ""
	@echo "Para alterar, defina as vari√°veis de ambiente ou edite o docker-compose.yml"

# Informa√ß√µes sobre o arquivo de v√≠deo
video-info: ## Mostrar informa√ß√µes do arquivo de v√≠deo
	@echo "üìπ Informa√ß√µes do arquivo de v√≠deo:"
	@if [ -f $(VIDEO_FILE) ]; then \
		ls -lh $(VIDEO_FILE); \
		echo ""; \
		docker run --rm -v $(PWD)/$(VIDEO_FILE):/video.mp4:ro \
		jrottenberg/ffmpeg:4.4-alpine \
		-i /video.mp4 2>&1 | grep -E "(Stream|Duration)"; \
	else \
		echo "‚ùå Arquivo $(VIDEO_FILE) n√£o encontrado!"; \
	fi
