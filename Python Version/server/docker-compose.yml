services:
  # MediaMTX Server - Distribuição SRT/HLS/WebRTC
  mediamtx:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paladium-mediamtx-server
    ports:
      # WebRTC HTTP interface
      - "${WEBRTC_HTTP_PORT:-8554}:8554"
      # HLS streaming
      - "${HLS_PORT:-8888}:8888"
      # SRT streaming
      - "${SRT_PORT:-9000}:9000/udp"
      # API endpoint
      - "9997:9997"
      # Metrics endpoint
      - "9998:9998"
      # WebRTC UDP/TCP
      - "8000:8000/udp"
      - "8001:8001"
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - "./recordings:/app/recordings"
      - "./mediamtx.yml:/app/mediamtx.yml:ro"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9997/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - paladium-network

  # Web App - Interface HLS simples
  web:
    image: nginx:alpine
    container_name: paladium-web-app
    ports:
      - "${WEB_PORT:-8080}:80"
    volumes:
      - "./web:/usr/share/nginx/html:ro"
    restart: unless-stopped
    depends_on:
      mediamtx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    networks:
      - paladium-network

networks:
  paladium-network:
    driver: bridge
    name: paladium-server-network

volumes:
  recordings:
    driver: local
